{"version":3,"sources":["components/Navbar.js","components/TextForms.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","togglemode","role","htmlfor","TextForms","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","msg","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1464f3ae.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\"href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"  data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\"href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\"href=\"#\">{props.aboutText}</a>\r\n        </li>\r\n      </ul>\r\n      {/*<form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n  </form>*/}\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"></input>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\"> Enable Dark Mode </label>\r\n</div>\r\n    </div>\r\n  </div>\r\n\r\n</nav>\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes= \r\n{title: PropTypes.string, //proptypes should be string\r\naboutText: PropTypes.string } //text should be string\r\n\r\n\r\nNavbar.defaultProps={\r\n    aboutText:'About' //changing aboutText into About\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForms(props) {\r\n\r\n    const upClick=()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"Sucess\");\r\n    }\r\n    const downClick=()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"Sucess\");\r\n    }\r\n\r\n    const clearClick=()=>{\r\n      let newText = '';\r\n      setText(newText);\r\n      props.showAlert(\"text is Cleared\", \"Sucess\");\r\n  }\r\n\r\n  const copyText =()=>{\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text is copied\", \"Sucess\");\r\n  \r\n  }\r\n\r\n    const handleOnchage=(event)=>{\r\n        setText(event.target.value); //we can change the text in text area \r\n\r\n    }\r\n\r\n    const[text, setText] = useState();\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n  <textarea className=\"form-control\" onChange={handleOnchage} style={{backgroundColor:props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<div className=\"btn btn-primary mx-2\"  onClick={upClick}>Convert to UpperCase</div>\r\n<div className=\"btn btn-primary mx-2\"  onClick={downClick}>Convert to LowerCase</div>\r\n<div className=\"btn btn-primary mx-2\"  onClick={clearClick}>Clear text</div>\r\n<div className=\"btn btn-primary mx-2\"  onClick={copyText}>Copy Text</div>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h2>Preview</h2>\r\n      <p>{text}</p>\r\n\r\n    \r\n    </div>\r\n    </>\r\n  )\r\n  \r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert( props) {\r\n    return (\r\n      props.alert&& <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{props.alert.type}</strong> :{props.alert.msg}\r\n</div>\r\n    \r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\nimport Alert from './components/Alert';\n\n//import About from './components/About';\nimport React, {useState} from 'react';\n//import {\n  //BrowserRouter as Router,\n  //Routes,\n  //Route,\n  //Link\n //from \"react-router-dom\";\n\nfunction App() {\n\nconst [mode, setMode] = useState('light');//whether dark mode is enable or not\nconst [alert, setAlert] = useState('null');//whether dark mode is enable or not\n\nconst showAlert = (message, type)=>{\nsetAlert({\n  msg: message,\n  type:type\n})\nsetTimeout(()=>{\n  setAlert(null);\n},2000);\n\n}\n\n\nconst togglemode =()=>{\n  if(mode ==='light')\n  {\n  setMode ('dark');\n  document.body.style.backgroundColor ='#042743'\n  showAlert(\"Dark mode has been enabled\",\"Sucess\");\n  document.title = \"TextUtils-Dark Mode\";\n  }\n  else{\n    setMode ('light');\n    document.body.style.backgroundColor ='white'\n    showAlert(\"Light mode has been enabled\",\"Sucess\");\n    document.title = \"TextUtils-Light Mode\";\n  }\n}\n\n\n\nreturn (\n  <>\n<Navbar title = \"TextUtils\" mode = {mode} togglemode={togglemode}/>\n\n<Alert alert = {alert}/>\n<div className=\"container my-3\">\n{/*\n<Routes>\n    <Route exact path=\"/about\" element={<About/>}>\n          </Route>\n          <Route exact path=\"/\" \n          element={<TextForms showAlert={showAlert} heading =\"Enter the text to analyze below\" mode={mode}/>}>\n          </Route>\n        </Routes>\n*/}\n          <TextForms showAlert={showAlert} heading =\"Enter the text to analyze below:\" mode={mode}/>\n          </div>\n          </>\n      // </Router> \n    \n     \n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}